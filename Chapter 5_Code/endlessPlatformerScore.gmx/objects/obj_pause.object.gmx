<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>pause_surface = surface_create(surface_get_width(application_surface), surface_get_height(application_surface));

is_paused = false;

can_proceed = false;

choice = 0;

binding = false;
just_bound_select = false;

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_all();
surface_free(pause_surface);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_proceed = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (can_proceed &amp;&amp; keyboard_check_pressed(ord('P'))) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (can_proceed) {

    if(surface_exists(pause_surface)) draw_surface(pause_surface, 0, 0);

    else event_perform(ev_create,0);
    
    if(!is_paused) {
        is_paused = true;
        
        surface_set_target(pause_surface);
        draw_surface(application_surface, 0, 0);
        surface_reset_target();
        
        instance_deactivate_all(true);
    }
    
    //Menu system
    
    
    
    //Key Rebinding
    just_bound_select = false; //false by default, changed only if they do bind select
    if (binding) { //currently supposed to rebind; started in third case of second switch for choice
    
       draw_set_font(fnt_title);
       draw_set_color(c_black);
       draw_set_alpha(1);
       
       if (!bound_left) {
          draw_text(20, 50, "Press the new binding for moving left.");
          if (keyboard_check_pressed(vk_anykey)) {
             global.left = keyboard_lastkey;
             bound_left = true;
          }
       }
                   
       else if (!bound_right) {
            draw_text(20, 50, "Press the new binding for moving right.");
            if (keyboard_check_pressed(vk_anykey)) {
               global.right = keyboard_lastkey;
               bound_right = true;
            }
       }
                   
       else if (!bound_select) {
           draw_text(20, 50, "Press the new binding for selecting.");
            if (keyboard_check_pressed(vk_anykey)) {
               global.select = keyboard_lastkey;
               bound_select = true;
               binding = false;
               just_bound_select = true;
            }
       }
    
    }  
    
    
    
    
    draw_set_alpha(1);
    
    draw_roundrect_color(176, 288, 304, 480, c_blue, c_black, false);
    
    if (keyboard_check_pressed(vk_up) &amp;&amp; !binding) {
       if (choice &lt;= 0) choice = 2;
       else --choice;
    }
    else if (keyboard_check_pressed(vk_down) &amp;&amp; !binding) {
         if (choice &gt;= 2) choice = 0;
         else ++choice;
    }
    
    switch (choice) {
           case 0:
               draw_sprite(spr_resume, 1, 192, 320);
               draw_sprite(spr_quit, 0, 192, 384);
               draw_sprite(spr_changeBindings, 0, 192, 448);
               break;
           
           case 1:
               draw_sprite(spr_resume, 0, 192, 320);
               draw_sprite(spr_quit, 1, 192, 384);
               draw_sprite(spr_changeBindings, 0, 192, 448);
               break;
               
           case 2:
                draw_sprite(spr_resume, 0, 192, 320);
                draw_sprite(spr_quit, 0, 192, 384);
                draw_sprite(spr_changeBindings, 1, 192, 448);
                break;
    }
    
    if (keyboard_check_pressed(global.select) &amp;&amp; !binding &amp;&amp; !just_bound_select) { //make sure enter key wasn't for a rebind, if not: allow cycling through buttons
       switch (choice) {
              case 0: //unpause
                   instance_destroy();
                   break;
              
              case 1: //quit
                   global.target_room = rm_startScreen;
                   instance_create(0, 0, obj_transition);
                   instance_destroy();
                   break;
                   
              case 2: //rebind
                   binding = true;
                   bound_left = false;
                   bound_right = false;
                   bound_select = false;
                   break;
       }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

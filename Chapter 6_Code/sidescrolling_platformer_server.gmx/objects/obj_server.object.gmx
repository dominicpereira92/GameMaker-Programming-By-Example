<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.server_port &lt; 65535) ++global.server_port;

else if (global.server_port &gt; 49152) --global.server_port;

server = network_create_server(network_socket_tcp, global.server_port, 2);

retry = -1;

if (server &lt; 0) retry = show_question_async("Failed to create server. Try again?");

if (!global.initialized_server_vars) {
    sockets[1] = -1;
    sockets[0] = -1;
    
    network_array_position = 0;
    
    data_to_send_buff = buffer_create(2435, buffer_fixed, 4); //Normally 16-bit floats are aligned to 2, but as of writing (August 5, 2015), this is currently unsupported
    global.initialized_server_vars = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(ds_map_find_value(async_load, "type")) {
    case network_type_connect:
        sockets[network_array_position] = ds_map_find_value(async_load, "socket");
        if (network_array_position == 0) ++network_array_position;
        
        show_message_async("Client connected.");
        break;
    
    case network_type_disconnect:
        if (ds_map_find_value(async_load, "socket") == sockets[0]) {
            sockets[0] = -1;
            --network_array_position;
        }
        
        else sockets[1] = -1;
        
        if (sockets[0] != -1) {
            buffer_seek(data_to_send_buff, buffer_seek_start, 0);
            buffer_write(data_to_send_buff, buffer_f32, -2);
            network_send_packet(sockets[0], data_to_send_buff, buffer_tell(data_to_send_buff));
        }
        
        else if (sockets[1] != -1) {
            buffer_seek(data_to_send_buff, buffer_seek_start, 0);
            buffer_write(data_to_send_buff, buffer_f32, -2);
            network_send_packet(sockets[1], data_to_send_buff, buffer_tell(data_to_send_buff));
        }
        
        show_message_async("Client disconnected.");
        break;
        
    case network_type_data:
        if (ds_map_find_value(async_load, "id") == sockets[0] &amp;&amp; sockets[1] != -1) scr_handle_data(ds_map_find_value(async_load, "buffer"), 1);
        else if (ds_map_find_value(async_load, "id") == sockets[1] &amp;&amp; sockets[0] != -1) scr_handle_data(ds_map_find_value(async_load, "buffer"), 0);
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (retry == ds_map_find_value(async_load, "id") &amp;&amp; ds_map_find_value(async_load, "status")) {
    show_message_async("If the issue persists, close the server and try again later.");  
    event_perform(ev_create, 0);  
}

else if (retry == ds_map_find_value(async_load, "id")) game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sockets[0] != -1 &amp;&amp; sockets[1] != -1) {
    buffer_seek(data_to_send_buff, buffer_seek_start, 0);
    buffer_write(data_to_send_buff, buffer_f32, -2);
    
     /*if sending fails after 5 attempts, we'll stop trying - it's the best we can get given that the game is closing up (game_end event)
     and we can't put in a sleep command between sending and destroying the network.
     Alarms usually work for sleeping, but this is a game_end event, so we can't run other events after this
     a decent way for the client to know if the server is gone would be a UDP stream, but this gets complicated for this small networking tutorial*/
    for (var i = 0; network_send_packet(sockets[0], data_to_send_buff, buffer_tell(data_to_send_buff)) &lt; 0 &amp;&amp; i &lt; 5; ++i) {}
    for (var i = 0; network_send_packet(sockets[1], data_to_send_buff, buffer_tell(data_to_send_buff)) &lt; 0 &amp;&amp; i &lt; 5; ++i) {}
    
    network_destroy(server);
    buffer_delete(data_to_send_buff);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_set_alpha(1);

draw_text(20, 20, "SERVER IP ADDRESS: " + global.server_ip);

draw_text(20, 60, "SERVER PORT: " + string(global.server_port));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>get_string_async("Type in the IP Address and the port of the server you wish to connect to in the format of IP:port. The IP and port are printed on the screen of the server.", "");

player_two = -1;
    
server_ip = "";
server_port = "";

connected = false;
    
socket = network_create_socket(network_socket_tcp);
    
buff = buffer_create(2435, buffer_fixed, 4); //Normally 16-bit floats are aligned to 2, but as of writing (August 5, 2015) this is currently unsupported
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (connected) {
    buffer_seek(buff, buffer_seek_start, 0);
    
    buffer_write(buff, buffer_f32, obj_PC.x);
    
    buffer_write(buff, buffer_f32, obj_PC.y);
    
    if (obj_PC.sprite_index == spr_PC_walk) buffer_write(buff, buffer_f32, 0);
    
    else buffer_write(buff, buffer_f32, 1);
    
    buffer_write(buff, buffer_f32, obj_PC.image_index);
    
    buffer_write(buff, buffer_f32, obj_PC.image_xscale);
    
    network_send_packet(socket, buff, buffer_tell(buff));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ds_map_find_value(async_load, "type") == network_type_data) {
    var received_buff = ds_map_find_value(async_load, "buffer");
    buffer_seek(received_buff, buffer_seek_start, 0);
    
    var buff_first_val = buffer_read(received_buff, buffer_f32);
    
    if (buff_first_val == -2 &amp;&amp; instance_exists(obj_PC_other_player)) with (player_two) instance_destroy();
    
    else if (buff_first_val != -2){
        player_two_x = buff_first_val;
        player_two_y = buffer_read(received_buff, buffer_f32);
        
        if (buffer_read(received_buff, buffer_f32) == 0) player_two_sprite = spr_PC_walk_other;
        else player_two_sprite = spr_PC_jump_other;
        
        player_two_subimage = buffer_read(received_buff, buffer_f32);
        
        player_two_xscale = buffer_read(received_buff, buffer_f32);
        
        if (!instance_exists(obj_PC_other_player)) player_two = instance_create(player_two_x, player_two_y, obj_PC_other_player);
        
        with (player_two) {
            x = other.player_two_x;
            y = other.player_two_y;
            sprite_index = other.player_two_sprite;
            image_index = other.player_two_subimage;
            image_xscale = other.player_two_xscale;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="63">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var server_string = ds_map_find_value(async_load, "result");
server_ip = "";
server_port = "";
var met_colon = false;

if (server_string == "") get_string_async("No IP or port supplied.#Rememember, the format is IP:port.", ""); //triggered if they hit cancel, or if they hit okay and send nothing

else {
    for (var i = 1; i &lt; string_length(server_string) + 1; ++i) {
        var substr = string_char_at(server_string, i);
        
        for (var a = 48; a &lt; 58 &amp;&amp; met_colon; ++a) { //ensure current char is valid for port, otherwise there'll be an error when connecting
            if (substr == chr(a)) break; //48-57 are the digits
            else if (a == 57) get_string_async("Invalid port supplied.#Remember, the format is IP:port.", "");
        }
        
        if (substr != ":" &amp;&amp; !met_colon) server_ip = server_ip + substr; //colon separates IP from port
        
        else if (substr == ":") met_colon = true;
        
        else server_port = server_port + substr;
    }
    if (server_port == "") get_string_async("No port supplied.#Remember, the format is IP:port.", ""); //never parsed in a port
            
    else if (network_connect(socket, server_ip, real(server_port)) &lt; 0) get_string_async("Failed to connect to provided server.#Either an incorrect server IP Address or port was provided or the connection failed.#Remember, the format is IP:port.", ""); //failed connection, retry
    
    else connected = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>buffer_delete(buff);
network_destroy(socket);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

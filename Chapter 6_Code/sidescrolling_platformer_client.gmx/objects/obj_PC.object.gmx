<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PC_walk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
vspd = 0;
hspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//code for legacy and newer gamepad support is included, as putting both in even though the gamepad only supports one of them doesn't break the game
if (joystick_exists(1)) var joystick_connected = true;

else var joystick_connected = false;

if (gamepad_is_connected(0)) var gamepad_connected = true;

else var gamepad_connected = false; 

//Check for ground beneath
if (place_meeting(x, y + 1, obj_platform)) {
   vspd = 0;
   sprite_index = spr_PC_walk;
   
   if (keyboard_check(vk_space) || (joystick_connected &amp;&amp; joystick_check_button(1, 1)) || (gamepad_connected &amp;&amp; gamepad_button_check(0, gp_face1))) vspd = -15;
}

//no ground, must increase fall speed
else if (vspd &lt; 15) vspd++;

var using_controller = false;

if (joystick_connected &amp;&amp; ((joystick_xpos(1) &gt;= 0.1) || (joystick_xpos(1) &lt;= -0.1))) { 
    hspd = 5 * joystick_xpos(1);
    using_controller = true;
}
    
else if (gamepad_connected) {
    hspd = 5 * gamepad_axis_value(0, gp_axislh);
    if (hspd != 0) using_controller = true;    
}

else {
    if (keyboard_check(vk_right)) hspd = 5;
    
    if (keyboard_check(vk_left)) hspd = -5;
}

if ((keyboard_check(vk_right) &amp;&amp; keyboard_check(vk_left)) || (keyboard_check(vk_right) &amp;&amp; using_controller) || (keyboard_check(vk_left) &amp;&amp; using_controller)) {
   image_speed = 0;
   hspd = 0;
}

if (hspd &gt; 0) {
   sprite_index = spr_PC_walk;
   image_speed = 0.5;
   image_xscale = 1;
}

else if (hspd &lt; 0) {
     sprite_index = spr_PC_walk;
     image_speed = 0.5;
     image_xscale = -1;
}

if (vspd != 0) sprite_index = spr_PC_jump;

//horizontal collision within range of movement
if (place_meeting(x + hspd, y, obj_platform)) {
   while (!place_meeting(x + sign(hspd), y, obj_platform)) x += sign(hspd);
   hspd = 0;
}

//will always be added to, but if there was a collision within range of movement (look above), won't change any more
x += hspd;
hspd = 0;

//vertical collision, same idea as above
if (place_meeting(x, y + vspd, obj_platform)) {
   while (!place_meeting(x, y + sign(vspd), obj_platform)) y += sign(vspd);
   vspd = 0;
}

y += vspd;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
